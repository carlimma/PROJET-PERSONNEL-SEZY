const socket = io.connect('https://sezy.onrender.com');

// Chargement initial de la page
window.addEventListener('load', event => {

    // Demander les nouvelles dates au chargement de la page
    socket.emit('obtenirDates');

    // Récupérer et afficher les messages
    socket.emit('getMessages');
});

// Gestion de l'ajout d'une nouvelle date
document.getElementById('form-livraison').addEventListener('submit', function (event) {
    event.preventDefault();

    const date = document.getElementById('date').value;
    const destination = document.getElementById('destination').value;
    const prix = document.getElementById('prix').value;

    const livraison = {
        date: date,
        destination: destination,
        prix: prix
    };

    // Envoyer la nouvelle date au serveur
    socket.emit('nouvelleLivraison', livraison);

    // Réinitialiser le formulaire après l'envoi
    document.getElementById('form-livraison').reset();
    socket.emit('obtenirDates');

});



// Mise à jour des messages
document.addEventListener('DOMContentLoaded', (event) => {
    // Écouter l'événement 'getMessages' pour obtenir les messages

    const filterOptions = document.getElementById('filter-options');

    // Écouter les changements de filtre
    filterOptions.addEventListener('change', () => {
        const selectedFilter = document.querySelector('input[name="filter"]:checked').value;
        socket.emit('filterMessages', selectedFilter);
    });
    
    socket.on('getMessages', (messages) => {
        

        const messagesContainer = document.getElementById('messages-container');
        messagesContainer.innerHTML = '';

        messages.forEach(message => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message-container', 'received');
            messageElement.id = message.id;


            // Créer l'élément header
            const messageHeader = document.createElement('div');
            messageHeader.classList.add('message-header');

            messageHeader.innerHTML = `Reçu de la part de : ${message.name} <br><br> Mail : ${message.email} <br><br> Téléphone : ${message.phone}`;

            // Créer l'élément body
            const messageBody = document.createElement('div');
            messageBody.classList.add('message-body');
            messageBody.textContent = message.content;



            // Ajouter les éléments header, body et footer au conteneur de message
            messageElement.appendChild(messageHeader);
            messageElement.appendChild(messageBody);
            messagesContainer.appendChild(messageElement);



            
        });
        // Ajouter un gestionnaire d'événement de clic à chaque div de bouton
        document.querySelectorAll('.message-container').forEach(div => {
            div.addEventListener('click', function () {
                const Id = this.id; // Capturer l'ID de l'élément cliqué
                socket.emit('marquerLu', Id); // Envoyer l'ID via la socket

            });
        });


    



    });

    




});



    // Gestion de la réception du marquage comme lu
    socket.on('marquerLu', (ID) => {
        const selectedFilter = document.querySelector('input[name="filter"]:checked').value;
        if(selectedFilter!="unread"){
            socket.emit('getMessages'); // Actualiser la liste des messages après marquage comme lu
        }
        else{
            document.getElementById(ID).remove();
        }
    });

// Récupération et affichage des dates
socket.on('toutesDates', (dates) => {

    // Sélectionner l'élément où les dates seront affichées
    let dateContainer = document.querySelector('.card-body-Supprimer');
    dateContainer.innerHTML = ''; // Vider le contenu précédent

    // Parcourir toutes les nouvelles dates et les afficher
    for (let id in dates) {
        const date = dates[id];
        dateContainer.innerHTML += `<div id="Btn${date["id"]}" class="bouton-div" data-id="${date["id"]}">Date : ${date["date"].substring(8, 10)}/${date["date"].substring(5, 7)}/${date["date"].substring(0, 4)} -- Destination : ${date["destination"]} -- Prix : ${date["prix"]} FCFA</div>`;
    }

    // Ajouter un gestionnaire d'événement de clic à chaque div de bouton
    document.querySelectorAll('.bouton-div').forEach(div => {
        div.addEventListener('click', function () {
            const dateId = this.dataset.id; // Capturer l'ID de l'élément cliqué
            socket.emit('suppressionDate', dateId); // Envoyer l'ID via la socket
        });
    });
});



// Réaction à la suppression réussie d'une date
socket.on('dateSupprimee', () => {
    socket.emit('obtenirDates'); // Actualiser la liste des dates après suppression
});

// Réaction à une erreur de suppression de date
socket.on('erreurSuppressionDate', () => {
    alert('Erreur de suppression. Veuillez réessayer.');
});


document.addEventListener('DOMContentLoaded', () => {
    const logoutButton = document.getElementById('logoutButton');
    logoutButton.addEventListener('click', () => {
        socket.emit('logout');
    });

    socket.on('logoutSuccess', () => {
        window.location.href = './login.html';  // Rediriger vers la page de connexion
    });
});